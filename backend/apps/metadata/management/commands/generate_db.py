import os
from typing import Any

from django.core.management.base import BaseCommand
from django.db import connection

from metadata.models import (
    Dictionary,
    Form,
    Group,
    Field,
)


class Command(BaseCommand):
    """Generate database command"""

    help = 'Генерация структуры базы данных.'

    MODELS_FILE = 'apps/main/models.py'
    SERIALIZERS_FILE = 'apps/main/serializers.py'
    VIEWS_FILE = 'apps/main/views.py'
    URLS_FILE = 'apps/main/urls.py'
    ADMIN_FILE = 'apps/main/admin.py'

    def check_exists_table(self, table_name: str) -> bool:
        sql = f"SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = '{table_name}')"
        with connection.cursor() as cursor:
            cursor.execute(sql)
            row = cursor.fetchone()
            return row[0]

    def check_exists_column(self, table_name: str, column_name: str) -> bool:
        sql = (f"SELECT EXISTS (SELECT 1 FROM information_schema.columns "
               f"WHERE table_name = '{table_name}' and column_name = '{column_name}')")
        with connection.cursor() as cursor:
            cursor.execute(sql)
            row = cursor.fetchone()
            return row[0]

    def check_same_column(self, table_name: str, fld: dict) -> bool:
        sql = (f"SELECT data_type, character_maximum_length, numeric_precision FROM information_schema.columns "
               f"WHERE table_name = '{table_name}' and column_name = '{fld.field_name.lower()}'")
        with connection.cursor() as cursor:
            cursor.execute(sql)
            row = cursor.fetchone()
            length = row[1] if row[1] else 0
            precision = row[2] if row[0] == 'numeric' else 0
            return self.get_field_type(fld).startswith(
                row[0]) and fld.len == length and fld.precision == precision

    def create_dictionary_table(self, table_name: str) -> None:
        sql = (f"CREATE TABLE {table_name}( "
               "id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY, "
               "title text NOT NULL, "
               "is_enable boolean NOT NULL DEFAULT TRUE, "
               f"CONSTRAINT {table_name}_pkey PRIMARY KEY (id))")

        with connection.cursor() as cursor:
            cursor.execute(sql)

    def create_db_table(self, tbl: dict) -> None:
        sql = (f"CREATE TABLE {tbl['table_name']}( "
               "id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY, "
               "doc_id bigint REFERENCES documents ON DELETE RESTRICT, "
               "lst smallint NOT NULL DEFAULT 0, "
               f"{(', ').join(tbl['fields_sql'])}, "
               f"CONSTRAINT {tbl['table_name']}_pkey PRIMARY KEY (id) "
               ")")

        with connection.cursor() as cursor:
            cursor.execute(sql)

    def get_field_type(self, fld: dict) -> str:
        if fld.field_type == 'text' or fld.field_type == 'cyrillic':
            return f"character varying({fld.len})"
        elif fld.field_type == 'int':
            return f"integer"
        elif fld.field_type == 'bigint' or fld.field_type == 'dict':
            return f"bigint"
        elif fld.field_type == 'numeric':
            return f"numeric({fld.precision})"
        elif fld.field_type == 'date':
            return f"date"
        elif fld.field_type == 'time':
            return f"time without time zone"
        elif fld.field_type == 'timestamp':
            return f"timestamp"
        else:
            raise Exception(
                f'Unknown field type for field: {fld.field_name} type: {fld.field_type}')

    def get_tables(self) -> dict:
        tbls = {}
        forms = Form.objects.filter(form_type='input_form')
        for frm in forms:
            groups = Group.objects.filter(form=frm.id)
            for grp in groups:
                table_name = grp.table_name.lower()
                if table_name not in tbls.keys():
                    tbls[table_name] = {}
                    tbls[table_name]['table_name'] = table_name
                    tbls[table_name]['fields'] = []
                    tbls[table_name]['fields_sql'] = []
                fields = Field.objects.filter(group=grp.id)
                for fld in fields:
                    field_sql = f"{fld.field_name.lower()} {self.get_field_type(fld)}"
                    tbls[table_name]['fields_sql'].append(field_sql)
                    tbls[table_name]['fields'].append(fld)
        return tbls

    def add_column(self, table_name: str, fld: dict) -> None:
        sql = (f"ALTER TABLE {table_name} ADD COLUMN"
               f"{fld.field_name.lower()} {self.init_field_sql(fld)}")
        with connection.cursor() as cursor:
            cursor.execute((" ").join(sql))

    def alter_column(self, table_name: str, fld: dict) -> None:
        field_name = fld.field_name.lower()
        with connection.cursor() as cursor:
            # 1 add temp column
            sql = f"ALTER TABLE {table_name} ADD COLUMN temp_column {self.get_field_type(fld)}"
            cursor.execute(sql)
            # 2 update temp column
            sql = (f"UPDATE {table_name} SET temp_column=CAST({field_name} AS {self.get_field_type(fld)})"
                   f" WHERE {field_name} IS NOT NULL")
            cursor.execute(sql)
            # 3 drop old column
            sql = f"ALTER TABLE {table_name} DROP COLUMN {field_name}"
            cursor.execute(sql)
            # 4 rename temp column
            sql = f"ALTER TABLE {table_name} RENAME COLUMN temp_column TO {field_name}"
            cursor.execute(sql)

    def replace_in_file(self, file_name: str, source: str, replace_str: str) -> None:
        with open(file_name, 'r') as file:
            filedata = file.read()

        filedata = filedata.replace(source, replace_str)

        with open(file_name, 'w') as file:
            file.write(filedata)

    def init_models(self, file_name: str, dicts: str, tbls: str) -> None:
        os.system(
            f"python3 manage.py inspectdb documents {dicts} {tbls} > {file_name}")

        os.system("python3 manage.py makemigrations main")
        os.system("python3 manage.py migrate main")

        self.replace_in_file(file_name, 'managed = False', 'managed = True')

        os.system("python3 manage.py makemigrations main")
        os.system("python3 manage.py migrate main")

    def init_serializers(self, file_name: str, dicts: str, tbls: str) -> None:
        models = (" ").join(
            ['Documents', dicts.capitalize(), tbls.capitalize()]).split()
        lines = []
        lines.append('from rest_framework import serializers\n')
        lines.append('from .models import *\n')
        for model in models:
            lines.append(
                f'\n\nclass {model}Serializer(serializers.ModelSerializer):\n')
            lines.append('    class Meta:\n')
            lines.append(f'        model = {model}\n')
            lines.append(f'        fields = "__all__"\n')
        lines.append('\n')

        with open(file_name, 'w') as file:
            file.writelines(lines)

    def init_views(self, file_name: str, dicts: str, tbls: str) -> None:
        models = (" ").join(
            ['Documents', dicts.capitalize(), tbls.capitalize()]).split()
        lines = []
        lines.append('from rest_framework import viewsets\n')
        lines.append('from .models import *\n')
        lines.append('from .serializers import *\n')
        for model in models:
            lines.append(f'\n\nclass {model}ViewSet(viewsets.ModelViewSet):\n')
            lines.append(f'    queryset = {model}.objects.all()\n')
            lines.append(f'    serializer_class = {model}Serializer\n')
        lines.append('\n')

        with open(file_name, 'w') as file:
            file.writelines(lines)

    def init_urls(self, file_name: str, dicts: str, tbls: str) -> None:
        models = (" ").join(
            ['Documents', dicts.capitalize(), tbls.capitalize()]).split()
        lines = []
        lines.append('from rest_framework import routers\n')
        lines.append('from .views import *\n')
        lines.append('\nrouter = routers.SimpleRouter()\n')
        for model in models:
            lines.append(
                f"router.register(r'{model.lower()}', {model}ViewSet)\n")
        lines.append('\nurlpatterns = router.urls\n')
        lines.append('\n')

        with open(file_name, 'w') as file:
            file.writelines(lines)

    def init_admin(self, file_name: str, dicts: str, tbls: str) -> None:
        models = (" ").join(
            ['Documents', dicts.capitalize(), tbls.capitalize()]).split()
        lines = []
        lines.append("from django.contrib import admin\n")
        lines.append("from .models import *\n")
        lines.append("\n\nclass DocumentsAdmin(admin.ModelAdmin):\n")
        lines.append("    list_display = (\n")
        lines.append("        'is_active',\n")
        lines.append("        'old_id',\n")
        lines.append("        'date_start',\n")
        lines.append("        'date_end',\n")
        lines.append("        'created_at',\n")
        lines.append("        'created_user',\n")
        lines.append("        'changed_at',\n")
        lines.append("        'changed_user'\n")
        lines.append(")\n")
        for model in dicts.capitalize().split():
            lines.append(
                f"\n\nclass {model}Admin(admin.ModelAdmin):\n")
            lines.append("    list_display = (\n")
            lines.append("        'id',\n")
            lines.append("        'title',\n")
            lines.append("        'is_enable',\n")
            lines.append("    )\n\n")

        for model in tbls.capitalize().split():
            lines.append(
                f"\n\nclass {model}Admin(admin.ModelAdmin):\n")
            lines.append("    list_display = (\n")
            lines.append("        'id',\n")
            fields = Field.objects.filter(group__table_name=model.lower())
            for field in fields:
                lines.append(f"        '{field.field_name.lower()}',\n")
            lines.append("    )\n\n")

        for model in models:
            lines.append(f"admin.site.register({model}, {model}Admin)\n")
        lines.append("\n")

        with open(file_name, 'w') as file:
            file.writelines(lines)

    def generate_dictionaries(self) -> str:
        dictionaries = Dictionary.objects.all()

        dict_tables = []
        for dict in dictionaries:
            table_name = dict.table_name.lower()
            if not self.check_exists_table(table_name):
                self.create_dictionary_table(table_name)
            dict_tables.append(table_name)

        return (" ").join(dict_tables)

    def generate_databases(self) -> str:
        tbls: dict = self.get_tables()

        for tbl in tbls.keys():
            if not self.check_exists_table(tbl):
                self.create_db_table(tbls[tbl])
            else:
                for fld in tbls[tbl]['fields']:
                    if not self.check_exists_column(tbl, fld.field_name.lower()):
                        self.add_column(tbl, fld)
                    else:
                        if not self.check_same_column(tbl, fld):
                            self.alter_column(tbl, fld)

        return (" ").join(tbls.keys())

    def handle(self, *args: Any, **kwargs: Any) -> None:
        """Handles generate data"""

        dicts = self.generate_dictionaries()
        tbls = self.generate_databases()

        self.init_models(self.MODELS_FILE, dicts, tbls)
        self.init_serializers(self.SERIALIZERS_FILE, dicts, tbls)
        self.init_views(self.VIEWS_FILE, dicts, tbls)
        self.init_urls(self.URLS_FILE, dicts, tbls)
        self.init_admin(self.ADMIN_FILE, dicts, tbls)
